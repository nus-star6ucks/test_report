/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 90.0, "minX": 0.0, "maxY": 13719.0, "series": [{"data": [[0.0, 234.0], [0.1, 234.0], [0.2, 273.0], [0.3, 273.0], [0.4, 300.0], [0.5, 300.0], [0.6, 300.0], [0.7, 361.0], [0.8, 366.0], [0.9, 366.0], [1.0, 378.0], [1.1, 378.0], [1.2, 380.0], [1.3, 380.0], [1.4, 402.0], [1.5, 402.0], [1.6, 433.0], [1.7, 433.0], [1.8, 479.0], [1.9, 479.0], [2.0, 480.0], [2.1, 480.0], [2.2, 540.0], [2.3, 540.0], [2.4, 544.0], [2.5, 544.0], [2.6, 552.0], [2.7, 552.0], [2.8, 552.0], [2.9, 566.0], [3.0, 566.0], [3.1, 600.0], [3.2, 600.0], [3.3, 615.0], [3.4, 615.0], [3.5, 615.0], [3.6, 615.0], [3.7, 625.0], [3.8, 625.0], [3.9, 635.0], [4.0, 635.0], [4.1, 683.0], [4.2, 683.0], [4.3, 699.0], [4.4, 699.0], [4.5, 706.0], [4.6, 706.0], [4.7, 740.0], [4.8, 740.0], [4.9, 764.0], [5.0, 764.0], [5.1, 784.0], [5.2, 784.0], [5.3, 800.0], [5.4, 800.0], [5.5, 814.0], [5.6, 814.0], [5.7, 814.0], [5.8, 814.0], [5.9, 843.0], [6.0, 843.0], [6.1, 858.0], [6.2, 858.0], [6.3, 872.0], [6.4, 872.0], [6.5, 877.0], [6.6, 877.0], [6.7, 907.0], [6.8, 907.0], [6.9, 921.0], [7.0, 921.0], [7.1, 963.0], [7.2, 963.0], [7.3, 965.0], [7.4, 965.0], [7.5, 989.0], [7.6, 989.0], [7.7, 1000.0], [7.8, 1000.0], [7.9, 1009.0], [8.0, 1009.0], [8.1, 1009.0], [8.2, 1009.0], [8.3, 1042.0], [8.4, 1042.0], [8.5, 1087.0], [8.6, 1087.0], [8.7, 1109.0], [8.8, 1109.0], [8.9, 1127.0], [9.0, 1127.0], [9.1, 1131.0], [9.2, 1131.0], [9.3, 1133.0], [9.4, 1136.0], [9.5, 1136.0], [9.6, 1147.0], [9.7, 1147.0], [9.8, 1152.0], [9.9, 1152.0], [10.0, 1155.0], [10.1, 1155.0], [10.2, 1161.0], [10.3, 1161.0], [10.4, 1167.0], [10.5, 1167.0], [10.6, 1194.0], [10.7, 1194.0], [10.8, 1195.0], [10.9, 1195.0], [11.0, 1209.0], [11.1, 1209.0], [11.2, 1209.0], [11.3, 1209.0], [11.4, 1211.0], [11.5, 1211.0], [11.6, 1245.0], [11.7, 1245.0], [11.8, 1267.0], [11.9, 1267.0], [12.0, 1271.0], [12.1, 1271.0], [12.2, 1273.0], [12.3, 1273.0], [12.4, 1301.0], [12.5, 1301.0], [12.6, 1327.0], [12.7, 1327.0], [12.8, 1339.0], [12.9, 1339.0], [13.0, 1345.0], [13.1, 1345.0], [13.2, 1369.0], [13.3, 1369.0], [13.4, 1381.0], [13.5, 1381.0], [13.6, 1401.0], [13.7, 1401.0], [13.8, 1405.0], [13.9, 1405.0], [14.0, 1425.0], [14.1, 1425.0], [14.2, 1440.0], [14.3, 1440.0], [14.4, 1450.0], [14.5, 1450.0], [14.6, 1463.0], [14.7, 1463.0], [14.8, 1483.0], [14.9, 1483.0], [15.0, 1490.0], [15.1, 1490.0], [15.2, 1508.0], [15.3, 1508.0], [15.4, 1545.0], [15.5, 1545.0], [15.6, 1564.0], [15.7, 1564.0], [15.8, 1589.0], [15.9, 1589.0], [16.0, 1613.0], [16.1, 1613.0], [16.2, 1623.0], [16.3, 1623.0], [16.4, 1637.0], [16.5, 1637.0], [16.6, 1645.0], [16.7, 1645.0], [16.8, 1655.0], [16.9, 1655.0], [17.0, 1723.0], [17.1, 1723.0], [17.2, 1735.0], [17.3, 1735.0], [17.4, 1763.0], [17.5, 1763.0], [17.6, 1775.0], [17.7, 1775.0], [17.8, 1783.0], [17.9, 1783.0], [18.0, 1813.0], [18.1, 1813.0], [18.2, 1829.0], [18.3, 1829.0], [18.4, 1839.0], [18.5, 1839.0], [18.6, 1866.0], [18.7, 1866.0], [18.8, 1887.0], [18.9, 1887.0], [19.0, 1897.0], [19.1, 1897.0], [19.2, 1900.0], [19.3, 1900.0], [19.4, 1914.0], [19.5, 1914.0], [19.6, 1959.0], [19.7, 1959.0], [19.8, 2034.0], [19.9, 2034.0], [20.0, 2039.0], [20.1, 2039.0], [20.2, 2042.0], [20.3, 2042.0], [20.4, 2061.0], [20.5, 2061.0], [20.6, 2062.0], [20.7, 2062.0], [20.8, 2063.0], [20.9, 2063.0], [21.0, 2082.0], [21.1, 2082.0], [21.2, 2099.0], [21.3, 2099.0], [21.4, 2104.0], [21.5, 2104.0], [21.6, 2150.0], [21.7, 2150.0], [21.8, 2185.0], [21.9, 2185.0], [22.0, 2192.0], [22.1, 2192.0], [22.2, 2207.0], [22.3, 2207.0], [22.4, 2293.0], [22.5, 2293.0], [22.6, 2333.0], [22.7, 2333.0], [22.8, 2341.0], [22.9, 2341.0], [23.0, 2365.0], [23.1, 2365.0], [23.2, 2384.0], [23.3, 2384.0], [23.4, 2384.0], [23.5, 2384.0], [23.6, 2402.0], [23.7, 2402.0], [23.8, 2435.0], [23.9, 2435.0], [24.0, 2455.0], [24.1, 2455.0], [24.2, 2471.0], [24.3, 2471.0], [24.4, 2474.0], [24.5, 2474.0], [24.6, 2479.0], [24.7, 2479.0], [24.8, 2486.0], [24.9, 2486.0], [25.0, 2531.0], [25.1, 2531.0], [25.2, 2547.0], [25.3, 2547.0], [25.4, 2551.0], [25.5, 2551.0], [25.6, 2576.0], [25.7, 2576.0], [25.8, 2626.0], [25.9, 2626.0], [26.0, 2684.0], [26.1, 2684.0], [26.2, 2717.0], [26.3, 2717.0], [26.4, 2717.0], [26.5, 2717.0], [26.6, 2793.0], [26.7, 2793.0], [26.8, 2813.0], [26.9, 2813.0], [27.0, 2816.0], [27.1, 2816.0], [27.2, 2862.0], [27.3, 2862.0], [27.4, 2866.0], [27.5, 2866.0], [27.6, 2869.0], [27.7, 2869.0], [27.8, 2873.0], [27.9, 2873.0], [28.0, 2877.0], [28.1, 2877.0], [28.2, 2952.0], [28.3, 2952.0], [28.4, 2964.0], [28.5, 2964.0], [28.6, 3008.0], [28.7, 3008.0], [28.8, 3009.0], [28.9, 3009.0], [29.0, 3017.0], [29.1, 3017.0], [29.2, 3027.0], [29.3, 3027.0], [29.4, 3035.0], [29.5, 3035.0], [29.6, 3046.0], [29.7, 3046.0], [29.8, 3105.0], [29.9, 3105.0], [30.0, 3123.0], [30.1, 3123.0], [30.2, 3143.0], [30.3, 3143.0], [30.4, 3155.0], [30.5, 3155.0], [30.6, 3159.0], [30.7, 3159.0], [30.8, 3180.0], [30.9, 3180.0], [31.0, 3215.0], [31.1, 3215.0], [31.2, 3215.0], [31.3, 3215.0], [31.4, 3219.0], [31.5, 3219.0], [31.6, 3253.0], [31.7, 3253.0], [31.8, 3260.0], [31.9, 3260.0], [32.0, 3365.0], [32.1, 3365.0], [32.2, 3467.0], [32.3, 3467.0], [32.4, 3598.0], [32.5, 3598.0], [32.6, 3619.0], [32.7, 3619.0], [32.8, 3711.0], [32.9, 3711.0], [33.0, 3755.0], [33.1, 3755.0], [33.2, 3819.0], [33.3, 3819.0], [33.4, 3858.0], [33.5, 3858.0], [33.6, 3875.0], [33.7, 3875.0], [33.8, 3931.0], [33.9, 3931.0], [34.0, 3939.0], [34.1, 3939.0], [34.2, 3939.0], [34.3, 3939.0], [34.4, 4071.0], [34.5, 4071.0], [34.6, 4117.0], [34.7, 4117.0], [34.8, 4139.0], [34.9, 4139.0], [35.0, 4148.0], [35.1, 4148.0], [35.2, 4152.0], [35.3, 4152.0], [35.4, 4154.0], [35.5, 4154.0], [35.6, 4167.0], [35.7, 4167.0], [35.8, 4201.0], [35.9, 4201.0], [36.0, 4272.0], [36.1, 4272.0], [36.2, 4389.0], [36.3, 4389.0], [36.4, 4395.0], [36.5, 4395.0], [36.6, 4462.0], [36.7, 4462.0], [36.8, 4515.0], [36.9, 4515.0], [37.0, 4688.0], [37.1, 4688.0], [37.2, 4719.0], [37.3, 4719.0], [37.4, 4726.0], [37.5, 4726.0], [37.6, 4728.0], [37.7, 4728.0], [37.8, 4760.0], [37.9, 4760.0], [38.0, 4764.0], [38.1, 4764.0], [38.2, 4783.0], [38.3, 4783.0], [38.4, 4783.0], [38.5, 4797.0], [38.6, 4797.0], [38.7, 4815.0], [38.8, 4815.0], [38.9, 4831.0], [39.0, 4831.0], [39.1, 4838.0], [39.2, 4838.0], [39.3, 4864.0], [39.4, 4864.0], [39.5, 4876.0], [39.6, 4876.0], [39.7, 4881.0], [39.8, 4881.0], [39.9, 4884.0], [40.0, 4884.0], [40.1, 4884.0], [40.2, 4884.0], [40.3, 4903.0], [40.4, 4903.0], [40.5, 4959.0], [40.6, 4959.0], [40.7, 4984.0], [40.8, 4984.0], [40.9, 5006.0], [41.0, 5006.0], [41.1, 5008.0], [41.2, 5008.0], [41.3, 5040.0], [41.4, 5040.0], [41.5, 5062.0], [41.6, 5062.0], [41.7, 5062.0], [41.8, 5062.0], [41.9, 5069.0], [42.0, 5069.0], [42.1, 5070.0], [42.2, 5070.0], [42.3, 5090.0], [42.4, 5090.0], [42.5, 5099.0], [42.6, 5099.0], [42.7, 5114.0], [42.8, 5114.0], [42.9, 5142.0], [43.0, 5142.0], [43.1, 5189.0], [43.2, 5189.0], [43.3, 5216.0], [43.4, 5216.0], [43.5, 5232.0], [43.6, 5232.0], [43.7, 5245.0], [43.8, 5245.0], [43.9, 5246.0], [44.0, 5246.0], [44.1, 5257.0], [44.2, 5257.0], [44.3, 5258.0], [44.4, 5258.0], [44.5, 5264.0], [44.6, 5264.0], [44.7, 5283.0], [44.8, 5283.0], [44.9, 5324.0], [45.0, 5324.0], [45.1, 5329.0], [45.2, 5329.0], [45.3, 5367.0], [45.4, 5367.0], [45.5, 5368.0], [45.6, 5368.0], [45.7, 5370.0], [45.8, 5370.0], [45.9, 5380.0], [46.0, 5380.0], [46.1, 5382.0], [46.2, 5382.0], [46.3, 5453.0], [46.4, 5453.0], [46.5, 5473.0], [46.6, 5473.0], [46.7, 5490.0], [46.8, 5490.0], [46.9, 5525.0], [47.0, 5525.0], [47.1, 5543.0], [47.2, 5543.0], [47.3, 5551.0], [47.4, 5551.0], [47.5, 5552.0], [47.6, 5552.0], [47.7, 5558.0], [47.8, 5558.0], [47.9, 5566.0], [48.0, 5566.0], [48.1, 5613.0], [48.2, 5613.0], [48.3, 5622.0], [48.4, 5622.0], [48.5, 5691.0], [48.6, 5691.0], [48.7, 5705.0], [48.8, 5705.0], [48.9, 5725.0], [49.0, 5725.0], [49.1, 5738.0], [49.2, 5738.0], [49.3, 5746.0], [49.4, 5746.0], [49.5, 5766.0], [49.6, 5766.0], [49.7, 5775.0], [49.8, 5775.0], [49.9, 5785.0], [50.0, 5785.0], [50.1, 5786.0], [50.2, 5786.0], [50.3, 5812.0], [50.4, 5812.0], [50.5, 5816.0], [50.6, 5816.0], [50.7, 5845.0], [50.8, 5845.0], [50.9, 5867.0], [51.0, 5867.0], [51.1, 5870.0], [51.2, 5870.0], [51.3, 5893.0], [51.4, 5893.0], [51.5, 5933.0], [51.6, 5933.0], [51.7, 5946.0], [51.8, 5946.0], [51.9, 5950.0], [52.0, 5950.0], [52.1, 5962.0], [52.2, 5962.0], [52.3, 5990.0], [52.4, 5990.0], [52.5, 5995.0], [52.6, 5995.0], [52.7, 5996.0], [52.8, 5996.0], [52.9, 5998.0], [53.0, 5998.0], [53.1, 6015.0], [53.2, 6015.0], [53.3, 6033.0], [53.4, 6033.0], [53.5, 6105.0], [53.6, 6105.0], [53.7, 6117.0], [53.8, 6117.0], [53.9, 6219.0], [54.0, 6219.0], [54.1, 6222.0], [54.2, 6222.0], [54.3, 6260.0], [54.4, 6260.0], [54.5, 6295.0], [54.6, 6295.0], [54.7, 6312.0], [54.8, 6312.0], [54.9, 6361.0], [55.0, 6361.0], [55.1, 6407.0], [55.2, 6407.0], [55.3, 6424.0], [55.4, 6424.0], [55.5, 6458.0], [55.6, 6458.0], [55.7, 6517.0], [55.8, 6517.0], [55.9, 6547.0], [56.0, 6547.0], [56.1, 6582.0], [56.2, 6582.0], [56.3, 6593.0], [56.4, 6593.0], [56.5, 6605.0], [56.6, 6605.0], [56.7, 6609.0], [56.8, 6609.0], [56.9, 6610.0], [57.0, 6610.0], [57.1, 6710.0], [57.2, 6710.0], [57.3, 6886.0], [57.4, 6886.0], [57.5, 6930.0], [57.6, 6930.0], [57.7, 6968.0], [57.8, 6968.0], [57.9, 6992.0], [58.0, 6992.0], [58.1, 7047.0], [58.2, 7047.0], [58.3, 7062.0], [58.4, 7062.0], [58.5, 7067.0], [58.6, 7067.0], [58.7, 7086.0], [58.8, 7086.0], [58.9, 7140.0], [59.0, 7140.0], [59.1, 7173.0], [59.2, 7173.0], [59.3, 7191.0], [59.4, 7191.0], [59.5, 7214.0], [59.6, 7214.0], [59.7, 7221.0], [59.8, 7221.0], [59.9, 7320.0], [60.0, 7320.0], [60.1, 7324.0], [60.2, 7324.0], [60.3, 7497.0], [60.4, 7497.0], [60.5, 7557.0], [60.6, 7557.0], [60.7, 7571.0], [60.8, 7571.0], [60.9, 7580.0], [61.0, 7580.0], [61.1, 7582.0], [61.2, 7582.0], [61.3, 7586.0], [61.4, 7586.0], [61.5, 7599.0], [61.6, 7599.0], [61.7, 7600.0], [61.8, 7600.0], [61.9, 7607.0], [62.0, 7607.0], [62.1, 7645.0], [62.2, 7645.0], [62.3, 7653.0], [62.4, 7653.0], [62.5, 7675.0], [62.6, 7675.0], [62.7, 7676.0], [62.8, 7676.0], [62.9, 7677.0], [63.0, 7677.0], [63.1, 7684.0], [63.2, 7684.0], [63.3, 7686.0], [63.4, 7686.0], [63.5, 7699.0], [63.6, 7699.0], [63.7, 7704.0], [63.8, 7704.0], [63.9, 7707.0], [64.0, 7707.0], [64.1, 7717.0], [64.2, 7717.0], [64.3, 7739.0], [64.4, 7739.0], [64.5, 7741.0], [64.6, 7741.0], [64.7, 7746.0], [64.8, 7746.0], [64.9, 7756.0], [65.0, 7756.0], [65.1, 7758.0], [65.2, 7758.0], [65.3, 7798.0], [65.4, 7798.0], [65.5, 7802.0], [65.6, 7802.0], [65.7, 7813.0], [65.8, 7813.0], [65.9, 7814.0], [66.0, 7814.0], [66.1, 7856.0], [66.2, 7856.0], [66.3, 7858.0], [66.4, 7858.0], [66.5, 7882.0], [66.6, 7882.0], [66.7, 7887.0], [66.8, 7887.0], [66.9, 7898.0], [67.0, 7898.0], [67.1, 7930.0], [67.2, 7930.0], [67.3, 7943.0], [67.4, 7943.0], [67.5, 7950.0], [67.6, 7950.0], [67.7, 7973.0], [67.8, 7973.0], [67.9, 8016.0], [68.0, 8016.0], [68.1, 8026.0], [68.2, 8026.0], [68.3, 8053.0], [68.4, 8053.0], [68.5, 8061.0], [68.6, 8061.0], [68.7, 8069.0], [68.8, 8069.0], [68.9, 8079.0], [69.0, 8079.0], [69.1, 8091.0], [69.2, 8091.0], [69.3, 8091.0], [69.4, 8091.0], [69.5, 8094.0], [69.6, 8094.0], [69.7, 8118.0], [69.8, 8118.0], [69.9, 8129.0], [70.0, 8129.0], [70.1, 8130.0], [70.2, 8130.0], [70.3, 8137.0], [70.4, 8137.0], [70.5, 8171.0], [70.6, 8171.0], [70.7, 8216.0], [70.8, 8216.0], [70.9, 8227.0], [71.0, 8227.0], [71.1, 8236.0], [71.2, 8236.0], [71.3, 8241.0], [71.4, 8241.0], [71.5, 8242.0], [71.6, 8242.0], [71.7, 8257.0], [71.8, 8257.0], [71.9, 8275.0], [72.0, 8275.0], [72.1, 8283.0], [72.2, 8283.0], [72.3, 8294.0], [72.4, 8294.0], [72.5, 8295.0], [72.6, 8295.0], [72.7, 8304.0], [72.8, 8304.0], [72.9, 8318.0], [73.0, 8318.0], [73.1, 8337.0], [73.2, 8337.0], [73.3, 8360.0], [73.4, 8360.0], [73.5, 8364.0], [73.6, 8364.0], [73.7, 8375.0], [73.8, 8375.0], [73.9, 8398.0], [74.0, 8398.0], [74.1, 8432.0], [74.2, 8432.0], [74.3, 8434.0], [74.4, 8434.0], [74.5, 8449.0], [74.6, 8449.0], [74.7, 8458.0], [74.8, 8458.0], [74.9, 8459.0], [75.0, 8459.0], [75.1, 8485.0], [75.2, 8485.0], [75.3, 8492.0], [75.4, 8492.0], [75.5, 8511.0], [75.6, 8511.0], [75.7, 8526.0], [75.8, 8526.0], [75.9, 8591.0], [76.0, 8591.0], [76.1, 8611.0], [76.2, 8611.0], [76.3, 8627.0], [76.4, 8627.0], [76.5, 8681.0], [76.6, 8681.0], [76.7, 8724.0], [76.8, 8724.0], [76.9, 8789.0], [77.0, 8789.0], [77.1, 8804.0], [77.2, 8804.0], [77.3, 8847.0], [77.4, 8847.0], [77.5, 8915.0], [77.6, 8915.0], [77.7, 8985.0], [77.8, 8985.0], [77.9, 9005.0], [78.0, 9005.0], [78.1, 9006.0], [78.2, 9006.0], [78.3, 9012.0], [78.4, 9012.0], [78.5, 9012.0], [78.6, 9012.0], [78.7, 9019.0], [78.8, 9019.0], [78.9, 9045.0], [79.0, 9045.0], [79.1, 9049.0], [79.2, 9049.0], [79.3, 9050.0], [79.4, 9050.0], [79.5, 9092.0], [79.6, 9092.0], [79.7, 9097.0], [79.8, 9097.0], [79.9, 9105.0], [80.0, 9105.0], [80.1, 9114.0], [80.2, 9114.0], [80.3, 9117.0], [80.4, 9117.0], [80.5, 9206.0], [80.6, 9206.0], [80.7, 9244.0], [80.8, 9244.0], [80.9, 9245.0], [81.0, 9245.0], [81.1, 9266.0], [81.2, 9266.0], [81.3, 9280.0], [81.4, 9280.0], [81.5, 9286.0], [81.6, 9286.0], [81.7, 9295.0], [81.8, 9295.0], [81.9, 9299.0], [82.0, 9299.0], [82.1, 9317.0], [82.2, 9317.0], [82.3, 9319.0], [82.4, 9319.0], [82.5, 9323.0], [82.6, 9323.0], [82.7, 9325.0], [82.8, 9325.0], [82.9, 9332.0], [83.0, 9332.0], [83.1, 9346.0], [83.2, 9346.0], [83.3, 9347.0], [83.4, 9347.0], [83.5, 9362.0], [83.6, 9362.0], [83.7, 9369.0], [83.8, 9369.0], [83.9, 9397.0], [84.0, 9397.0], [84.1, 9398.0], [84.2, 9398.0], [84.3, 9414.0], [84.4, 9414.0], [84.5, 9461.0], [84.6, 9461.0], [84.7, 9463.0], [84.8, 9463.0], [84.9, 9467.0], [85.0, 9467.0], [85.1, 9475.0], [85.2, 9475.0], [85.3, 9481.0], [85.4, 9481.0], [85.5, 9485.0], [85.6, 9485.0], [85.7, 9487.0], [85.8, 9487.0], [85.9, 9489.0], [86.0, 9489.0], [86.1, 9493.0], [86.2, 9493.0], [86.3, 9508.0], [86.4, 9508.0], [86.5, 9513.0], [86.6, 9513.0], [86.7, 9518.0], [86.8, 9518.0], [86.9, 9547.0], [87.0, 9547.0], [87.1, 9556.0], [87.2, 9556.0], [87.3, 9569.0], [87.4, 9569.0], [87.5, 9593.0], [87.6, 9593.0], [87.7, 9600.0], [87.8, 9600.0], [87.9, 9610.0], [88.0, 9610.0], [88.1, 9629.0], [88.2, 9629.0], [88.3, 9634.0], [88.4, 9634.0], [88.5, 9647.0], [88.6, 9647.0], [88.7, 9675.0], [88.8, 9675.0], [88.9, 9723.0], [89.0, 9723.0], [89.1, 9743.0], [89.2, 9743.0], [89.3, 9747.0], [89.4, 9747.0], [89.5, 9766.0], [89.6, 9766.0], [89.7, 9784.0], [89.8, 9784.0], [89.9, 9801.0], [90.0, 9801.0], [90.1, 9819.0], [90.2, 9819.0], [90.3, 9857.0], [90.4, 9857.0], [90.5, 9880.0], [90.6, 9880.0], [90.7, 9893.0], [90.8, 9893.0], [90.9, 9900.0], [91.0, 9900.0], [91.1, 9909.0], [91.2, 9909.0], [91.3, 9923.0], [91.4, 9923.0], [91.5, 9938.0], [91.6, 9938.0], [91.7, 9972.0], [91.8, 9972.0], [91.9, 9991.0], [92.0, 9991.0], [92.1, 10009.0], [92.2, 10009.0], [92.3, 10013.0], [92.4, 10013.0], [92.5, 10018.0], [92.6, 10018.0], [92.7, 10071.0], [92.8, 10071.0], [92.9, 10076.0], [93.0, 10076.0], [93.1, 10157.0], [93.2, 10157.0], [93.3, 10174.0], [93.4, 10174.0], [93.5, 10206.0], [93.6, 10206.0], [93.7, 10216.0], [93.8, 10216.0], [93.9, 10216.0], [94.0, 10216.0], [94.1, 10221.0], [94.2, 10221.0], [94.3, 10273.0], [94.4, 10273.0], [94.5, 10324.0], [94.6, 10324.0], [94.7, 10417.0], [94.8, 10417.0], [94.9, 10451.0], [95.0, 10451.0], [95.1, 10500.0], [95.2, 10500.0], [95.3, 10503.0], [95.4, 10503.0], [95.5, 10541.0], [95.6, 10541.0], [95.7, 10565.0], [95.8, 10565.0], [95.9, 10623.0], [96.0, 10623.0], [96.1, 10638.0], [96.2, 10638.0], [96.3, 10690.0], [96.4, 10690.0], [96.5, 10886.0], [96.6, 10886.0], [96.7, 10970.0], [96.8, 10970.0], [96.9, 11164.0], [97.0, 11164.0], [97.1, 11200.0], [97.2, 11200.0], [97.3, 11203.0], [97.4, 11203.0], [97.5, 11427.0], [97.6, 11427.0], [97.7, 11465.0], [97.8, 11465.0], [97.9, 11750.0], [98.0, 11750.0], [98.1, 12049.0], [98.2, 12049.0], [98.3, 12049.0], [98.4, 12049.0], [98.5, 12061.0], [98.6, 12061.0], [98.7, 12070.0], [98.8, 12070.0], [98.9, 12304.0], [99.0, 12304.0], [99.1, 12332.0], [99.2, 12332.0], [99.3, 12587.0], [99.4, 12587.0], [99.5, 12746.0], [99.6, 12746.0], [99.7, 12966.0], [99.8, 12966.0], [99.9, 13015.0], [100.0, 13015.0]], "isOverall": false, "label": "Store List", "isController": false}, {"data": [[0.0, 90.0], [0.1, 90.0], [0.2, 99.0], [0.3, 99.0], [0.4, 106.0], [0.5, 106.0], [0.6, 106.0], [0.7, 136.0], [0.8, 172.0], [0.9, 172.0], [1.0, 187.0], [1.1, 187.0], [1.2, 267.0], [1.3, 267.0], [1.4, 272.0], [1.5, 272.0], [1.6, 276.0], [1.7, 276.0], [1.8, 353.0], [1.9, 353.0], [2.0, 364.0], [2.1, 364.0], [2.2, 388.0], [2.3, 388.0], [2.4, 396.0], [2.5, 396.0], [2.6, 405.0], [2.7, 405.0], [2.8, 405.0], [2.9, 424.0], [3.0, 424.0], [3.1, 429.0], [3.2, 429.0], [3.3, 434.0], [3.4, 434.0], [3.5, 545.0], [3.6, 545.0], [3.7, 650.0], [3.8, 650.0], [3.9, 653.0], [4.0, 653.0], [4.1, 674.0], [4.2, 674.0], [4.3, 732.0], [4.4, 732.0], [4.5, 763.0], [4.6, 763.0], [4.7, 795.0], [4.8, 795.0], [4.9, 836.0], [5.0, 836.0], [5.1, 846.0], [5.2, 846.0], [5.3, 846.0], [5.4, 846.0], [5.5, 878.0], [5.6, 878.0], [5.7, 896.0], [5.8, 896.0], [5.9, 915.0], [6.0, 915.0], [6.1, 924.0], [6.2, 924.0], [6.3, 937.0], [6.4, 937.0], [6.5, 976.0], [6.6, 976.0], [6.7, 1000.0], [6.8, 1000.0], [6.9, 1010.0], [7.0, 1010.0], [7.1, 1043.0], [7.2, 1043.0], [7.3, 1049.0], [7.4, 1049.0], [7.5, 1049.0], [7.6, 1049.0], [7.7, 1071.0], [7.8, 1071.0], [7.9, 1103.0], [8.0, 1103.0], [8.1, 1138.0], [8.2, 1138.0], [8.3, 1143.0], [8.4, 1143.0], [8.5, 1152.0], [8.6, 1152.0], [8.7, 1183.0], [8.8, 1212.0], [8.9, 1212.0], [9.0, 1234.0], [9.1, 1234.0], [9.2, 1238.0], [9.3, 1238.0], [9.4, 1246.0], [9.5, 1246.0], [9.6, 1266.0], [9.7, 1266.0], [9.8, 1305.0], [9.9, 1305.0], [10.0, 1340.0], [10.1, 1340.0], [10.2, 1361.0], [10.3, 1361.0], [10.4, 1367.0], [10.5, 1367.0], [10.6, 1386.0], [10.7, 1386.0], [10.8, 1418.0], [10.9, 1418.0], [11.0, 1434.0], [11.1, 1434.0], [11.2, 1443.0], [11.3, 1443.0], [11.4, 1447.0], [11.5, 1447.0], [11.6, 1493.0], [11.7, 1493.0], [11.8, 1503.0], [11.9, 1503.0], [12.0, 1525.0], [12.1, 1525.0], [12.2, 1526.0], [12.3, 1526.0], [12.4, 1549.0], [12.5, 1549.0], [12.6, 1557.0], [12.7, 1557.0], [12.8, 1560.0], [12.9, 1560.0], [13.0, 1561.0], [13.1, 1561.0], [13.2, 1588.0], [13.3, 1588.0], [13.4, 1661.0], [13.5, 1661.0], [13.6, 1663.0], [13.7, 1663.0], [13.8, 1665.0], [13.9, 1665.0], [14.0, 1690.0], [14.1, 1690.0], [14.2, 1700.0], [14.3, 1700.0], [14.4, 1716.0], [14.5, 1716.0], [14.6, 1741.0], [14.7, 1741.0], [14.8, 1754.0], [14.9, 1754.0], [15.0, 1755.0], [15.1, 1755.0], [15.2, 1770.0], [15.3, 1770.0], [15.4, 1772.0], [15.5, 1772.0], [15.6, 1786.0], [15.7, 1786.0], [15.8, 1795.0], [15.9, 1795.0], [16.0, 1809.0], [16.1, 1809.0], [16.2, 1813.0], [16.3, 1813.0], [16.4, 1826.0], [16.5, 1826.0], [16.6, 1826.0], [16.7, 1826.0], [16.8, 1827.0], [16.9, 1827.0], [17.0, 1878.0], [17.1, 1878.0], [17.2, 1886.0], [17.3, 1886.0], [17.4, 1908.0], [17.5, 1908.0], [17.6, 1969.0], [17.7, 1969.0], [17.8, 1997.0], [17.9, 1997.0], [18.0, 2044.0], [18.1, 2044.0], [18.2, 2049.0], [18.3, 2049.0], [18.4, 2094.0], [18.5, 2094.0], [18.6, 2097.0], [18.7, 2097.0], [18.8, 2098.0], [18.9, 2098.0], [19.0, 2184.0], [19.1, 2184.0], [19.2, 2263.0], [19.3, 2263.0], [19.4, 2275.0], [19.5, 2275.0], [19.6, 2279.0], [19.7, 2279.0], [19.8, 2288.0], [19.9, 2288.0], [20.0, 2293.0], [20.1, 2293.0], [20.2, 2298.0], [20.3, 2298.0], [20.4, 2301.0], [20.5, 2301.0], [20.6, 2304.0], [20.7, 2304.0], [20.8, 2335.0], [20.9, 2335.0], [21.0, 2340.0], [21.1, 2340.0], [21.2, 2359.0], [21.3, 2359.0], [21.4, 2364.0], [21.5, 2364.0], [21.6, 2373.0], [21.7, 2373.0], [21.8, 2402.0], [21.9, 2402.0], [22.0, 2432.0], [22.1, 2432.0], [22.2, 2433.0], [22.3, 2433.0], [22.4, 2438.0], [22.5, 2438.0], [22.6, 2443.0], [22.7, 2443.0], [22.8, 2476.0], [22.9, 2476.0], [23.0, 2481.0], [23.1, 2481.0], [23.2, 2501.0], [23.3, 2501.0], [23.4, 2567.0], [23.5, 2567.0], [23.6, 2580.0], [23.7, 2580.0], [23.8, 2619.0], [23.9, 2619.0], [24.0, 2632.0], [24.1, 2632.0], [24.2, 2747.0], [24.3, 2747.0], [24.4, 2747.0], [24.5, 2747.0], [24.6, 2750.0], [24.7, 2750.0], [24.8, 2765.0], [24.9, 2765.0], [25.0, 2771.0], [25.1, 2771.0], [25.2, 2818.0], [25.3, 2818.0], [25.4, 2850.0], [25.5, 2850.0], [25.6, 2855.0], [25.7, 2855.0], [25.8, 2862.0], [25.9, 2862.0], [26.0, 2872.0], [26.1, 2872.0], [26.2, 2873.0], [26.3, 2873.0], [26.4, 2887.0], [26.5, 2887.0], [26.6, 2888.0], [26.7, 2888.0], [26.8, 2909.0], [26.9, 2909.0], [27.0, 2925.0], [27.1, 2925.0], [27.2, 3003.0], [27.3, 3003.0], [27.4, 3012.0], [27.5, 3012.0], [27.6, 3072.0], [27.7, 3072.0], [27.8, 3101.0], [27.9, 3101.0], [28.0, 3109.0], [28.1, 3109.0], [28.2, 3118.0], [28.3, 3118.0], [28.4, 3144.0], [28.5, 3144.0], [28.6, 3149.0], [28.7, 3149.0], [28.8, 3195.0], [28.9, 3195.0], [29.0, 3230.0], [29.1, 3230.0], [29.2, 3232.0], [29.3, 3232.0], [29.4, 3318.0], [29.5, 3318.0], [29.6, 3334.0], [29.7, 3334.0], [29.8, 3346.0], [29.9, 3346.0], [30.0, 3355.0], [30.1, 3355.0], [30.2, 3359.0], [30.3, 3359.0], [30.4, 3375.0], [30.5, 3375.0], [30.6, 3386.0], [30.7, 3386.0], [30.8, 3414.0], [30.9, 3414.0], [31.0, 3432.0], [31.1, 3432.0], [31.2, 3480.0], [31.3, 3480.0], [31.4, 3497.0], [31.5, 3497.0], [31.6, 3520.0], [31.7, 3520.0], [31.8, 3531.0], [31.9, 3531.0], [32.0, 3547.0], [32.1, 3547.0], [32.2, 3549.0], [32.3, 3549.0], [32.4, 3552.0], [32.5, 3552.0], [32.6, 3570.0], [32.7, 3570.0], [32.8, 3626.0], [32.9, 3626.0], [33.0, 3634.0], [33.1, 3634.0], [33.2, 3644.0], [33.3, 3644.0], [33.4, 3656.0], [33.5, 3656.0], [33.6, 3673.0], [33.7, 3673.0], [33.8, 3677.0], [33.9, 3677.0], [34.0, 3679.0], [34.1, 3679.0], [34.2, 3685.0], [34.3, 3685.0], [34.4, 3708.0], [34.5, 3708.0], [34.6, 3737.0], [34.7, 3737.0], [34.8, 3785.0], [34.9, 3785.0], [35.0, 3825.0], [35.1, 3825.0], [35.2, 3826.0], [35.3, 3826.0], [35.4, 3852.0], [35.5, 3852.0], [35.6, 3864.0], [35.7, 3864.0], [35.8, 3874.0], [35.9, 3874.0], [36.0, 3931.0], [36.1, 3931.0], [36.2, 3944.0], [36.3, 3944.0], [36.4, 3981.0], [36.5, 3981.0], [36.6, 4016.0], [36.7, 4016.0], [36.8, 4026.0], [36.9, 4026.0], [37.0, 4050.0], [37.1, 4050.0], [37.2, 4083.0], [37.3, 4083.0], [37.4, 4099.0], [37.5, 4099.0], [37.6, 4099.0], [37.7, 4099.0], [37.8, 4102.0], [37.9, 4102.0], [38.0, 4146.0], [38.1, 4146.0], [38.2, 4204.0], [38.3, 4204.0], [38.4, 4275.0], [38.5, 4275.0], [38.6, 4288.0], [38.7, 4288.0], [38.8, 4288.0], [38.9, 4303.0], [39.0, 4303.0], [39.1, 4324.0], [39.2, 4324.0], [39.3, 4348.0], [39.4, 4348.0], [39.5, 4365.0], [39.6, 4365.0], [39.7, 4394.0], [39.8, 4394.0], [39.9, 4449.0], [40.0, 4449.0], [40.1, 4462.0], [40.2, 4462.0], [40.3, 4463.0], [40.4, 4463.0], [40.5, 4468.0], [40.6, 4468.0], [40.7, 4480.0], [40.8, 4480.0], [40.9, 4519.0], [41.0, 4519.0], [41.1, 4521.0], [41.2, 4521.0], [41.3, 4523.0], [41.4, 4523.0], [41.5, 4542.0], [41.6, 4542.0], [41.7, 4563.0], [41.8, 4563.0], [41.9, 4608.0], [42.0, 4608.0], [42.1, 4608.0], [42.2, 4608.0], [42.3, 4616.0], [42.4, 4616.0], [42.5, 4623.0], [42.6, 4623.0], [42.7, 4666.0], [42.8, 4666.0], [42.9, 4686.0], [43.0, 4686.0], [43.1, 4694.0], [43.2, 4694.0], [43.3, 4739.0], [43.4, 4739.0], [43.5, 4752.0], [43.6, 4752.0], [43.7, 4752.0], [43.8, 4752.0], [43.9, 4757.0], [44.0, 4757.0], [44.1, 4790.0], [44.2, 4790.0], [44.3, 4795.0], [44.4, 4795.0], [44.5, 4796.0], [44.6, 4796.0], [44.7, 4860.0], [44.8, 4860.0], [44.9, 4861.0], [45.0, 4861.0], [45.1, 4868.0], [45.2, 4868.0], [45.3, 4897.0], [45.4, 4897.0], [45.5, 4983.0], [45.6, 4983.0], [45.7, 5017.0], [45.8, 5017.0], [45.9, 5025.0], [46.0, 5025.0], [46.1, 5050.0], [46.2, 5050.0], [46.3, 5066.0], [46.4, 5066.0], [46.5, 5118.0], [46.6, 5118.0], [46.7, 5151.0], [46.8, 5151.0], [46.9, 5156.0], [47.0, 5156.0], [47.1, 5162.0], [47.2, 5162.0], [47.3, 5182.0], [47.4, 5182.0], [47.5, 5196.0], [47.6, 5196.0], [47.7, 5219.0], [47.8, 5219.0], [47.9, 5262.0], [48.0, 5262.0], [48.1, 5299.0], [48.2, 5299.0], [48.3, 5303.0], [48.4, 5303.0], [48.5, 5315.0], [48.6, 5315.0], [48.7, 5317.0], [48.8, 5317.0], [48.9, 5330.0], [49.0, 5330.0], [49.1, 5333.0], [49.2, 5333.0], [49.3, 5336.0], [49.4, 5336.0], [49.5, 5351.0], [49.6, 5351.0], [49.7, 5370.0], [49.8, 5370.0], [49.9, 5377.0], [50.0, 5377.0], [50.1, 5388.0], [50.2, 5388.0], [50.3, 5463.0], [50.4, 5463.0], [50.5, 5472.0], [50.6, 5472.0], [50.7, 5485.0], [50.8, 5485.0], [50.9, 5516.0], [51.0, 5516.0], [51.1, 5525.0], [51.2, 5525.0], [51.3, 5528.0], [51.4, 5528.0], [51.5, 5554.0], [51.6, 5554.0], [51.7, 5562.0], [51.8, 5562.0], [51.9, 5566.0], [52.0, 5566.0], [52.1, 5573.0], [52.2, 5573.0], [52.3, 5591.0], [52.4, 5591.0], [52.5, 5599.0], [52.6, 5599.0], [52.7, 5600.0], [52.8, 5600.0], [52.9, 5613.0], [53.0, 5613.0], [53.1, 5642.0], [53.2, 5642.0], [53.3, 5646.0], [53.4, 5646.0], [53.5, 5655.0], [53.6, 5655.0], [53.7, 5661.0], [53.8, 5661.0], [53.9, 5664.0], [54.0, 5664.0], [54.1, 5676.0], [54.2, 5676.0], [54.3, 5720.0], [54.4, 5720.0], [54.5, 5731.0], [54.6, 5731.0], [54.7, 5740.0], [54.8, 5740.0], [54.9, 5742.0], [55.0, 5742.0], [55.1, 5750.0], [55.2, 5750.0], [55.3, 5753.0], [55.4, 5753.0], [55.5, 5767.0], [55.6, 5767.0], [55.7, 5788.0], [55.8, 5788.0], [55.9, 5795.0], [56.0, 5795.0], [56.1, 5802.0], [56.2, 5802.0], [56.3, 5821.0], [56.4, 5821.0], [56.5, 5828.0], [56.6, 5828.0], [56.7, 5833.0], [56.8, 5833.0], [56.9, 5836.0], [57.0, 5836.0], [57.1, 5840.0], [57.2, 5840.0], [57.3, 5854.0], [57.4, 5854.0], [57.5, 5896.0], [57.6, 5896.0], [57.7, 5927.0], [57.8, 5927.0], [57.9, 5930.0], [58.0, 5930.0], [58.1, 5951.0], [58.2, 5951.0], [58.3, 5962.0], [58.4, 5962.0], [58.5, 5967.0], [58.6, 5967.0], [58.7, 5970.0], [58.8, 5970.0], [58.9, 6021.0], [59.0, 6021.0], [59.1, 6027.0], [59.2, 6027.0], [59.3, 6035.0], [59.4, 6035.0], [59.5, 6054.0], [59.6, 6054.0], [59.7, 6066.0], [59.8, 6066.0], [59.9, 6091.0], [60.0, 6091.0], [60.1, 6171.0], [60.2, 6171.0], [60.3, 6208.0], [60.4, 6208.0], [60.5, 6217.0], [60.6, 6217.0], [60.7, 6238.0], [60.8, 6238.0], [60.9, 6241.0], [61.0, 6241.0], [61.1, 6248.0], [61.2, 6248.0], [61.3, 6264.0], [61.4, 6264.0], [61.5, 6279.0], [61.6, 6279.0], [61.7, 6289.0], [61.8, 6289.0], [61.9, 6289.0], [62.0, 6289.0], [62.1, 6295.0], [62.2, 6295.0], [62.3, 6308.0], [62.4, 6308.0], [62.5, 6310.0], [62.6, 6310.0], [62.7, 6340.0], [62.8, 6340.0], [62.9, 6360.0], [63.0, 6360.0], [63.1, 6372.0], [63.2, 6372.0], [63.3, 6409.0], [63.4, 6409.0], [63.5, 6444.0], [63.6, 6444.0], [63.7, 6490.0], [63.8, 6490.0], [63.9, 6508.0], [64.0, 6508.0], [64.1, 6510.0], [64.2, 6510.0], [64.3, 6519.0], [64.4, 6519.0], [64.5, 6532.0], [64.6, 6532.0], [64.7, 6546.0], [64.8, 6546.0], [64.9, 6547.0], [65.0, 6547.0], [65.1, 6609.0], [65.2, 6609.0], [65.3, 6616.0], [65.4, 6616.0], [65.5, 6752.0], [65.6, 6752.0], [65.7, 6780.0], [65.8, 6780.0], [65.9, 6792.0], [66.0, 6792.0], [66.1, 6812.0], [66.2, 6812.0], [66.3, 6812.0], [66.4, 6812.0], [66.5, 6823.0], [66.6, 6823.0], [66.7, 6842.0], [66.8, 6842.0], [66.9, 6856.0], [67.0, 6856.0], [67.1, 6900.0], [67.2, 6900.0], [67.3, 6903.0], [67.4, 6903.0], [67.5, 6917.0], [67.6, 6917.0], [67.7, 6976.0], [67.8, 6976.0], [67.9, 6989.0], [68.0, 6989.0], [68.1, 6989.0], [68.2, 6989.0], [68.3, 6990.0], [68.4, 6990.0], [68.5, 7023.0], [68.6, 7023.0], [68.7, 7091.0], [68.8, 7091.0], [68.9, 7169.0], [69.0, 7169.0], [69.1, 7185.0], [69.2, 7185.0], [69.3, 7196.0], [69.4, 7196.0], [69.5, 7262.0], [69.6, 7262.0], [69.7, 7269.0], [69.8, 7269.0], [69.9, 7291.0], [70.0, 7291.0], [70.1, 7322.0], [70.2, 7322.0], [70.3, 7324.0], [70.4, 7324.0], [70.5, 7359.0], [70.6, 7359.0], [70.7, 7373.0], [70.8, 7373.0], [70.9, 7404.0], [71.0, 7404.0], [71.1, 7417.0], [71.2, 7417.0], [71.3, 7446.0], [71.4, 7446.0], [71.5, 7537.0], [71.6, 7537.0], [71.7, 7565.0], [71.8, 7565.0], [71.9, 7567.0], [72.0, 7567.0], [72.1, 7568.0], [72.2, 7568.0], [72.3, 7570.0], [72.4, 7570.0], [72.5, 7582.0], [72.6, 7582.0], [72.7, 7618.0], [72.8, 7618.0], [72.9, 7648.0], [73.0, 7648.0], [73.1, 7651.0], [73.2, 7651.0], [73.3, 7733.0], [73.4, 7733.0], [73.5, 7779.0], [73.6, 7779.0], [73.7, 7789.0], [73.8, 7789.0], [73.9, 7832.0], [74.0, 7832.0], [74.1, 7832.0], [74.2, 7832.0], [74.3, 7834.0], [74.4, 7834.0], [74.5, 7881.0], [74.6, 7881.0], [74.7, 7886.0], [74.8, 7886.0], [74.9, 7915.0], [75.0, 7915.0], [75.1, 7920.0], [75.2, 7920.0], [75.3, 7920.0], [75.4, 7920.0], [75.5, 7979.0], [75.6, 7979.0], [75.7, 8054.0], [75.8, 8054.0], [75.9, 8058.0], [76.0, 8058.0], [76.1, 8134.0], [76.2, 8134.0], [76.3, 8160.0], [76.4, 8160.0], [76.5, 8188.0], [76.6, 8188.0], [76.7, 8271.0], [76.8, 8271.0], [76.9, 8315.0], [77.0, 8315.0], [77.1, 8318.0], [77.2, 8318.0], [77.3, 8331.0], [77.4, 8331.0], [77.5, 8467.0], [77.6, 8467.0], [77.7, 8533.0], [77.8, 8533.0], [77.9, 8537.0], [78.0, 8537.0], [78.1, 8550.0], [78.2, 8550.0], [78.3, 8596.0], [78.4, 8596.0], [78.5, 8746.0], [78.6, 8746.0], [78.7, 8775.0], [78.8, 8775.0], [78.9, 8787.0], [79.0, 8787.0], [79.1, 8833.0], [79.2, 8833.0], [79.3, 8869.0], [79.4, 8869.0], [79.5, 8879.0], [79.6, 8879.0], [79.7, 8882.0], [79.8, 8882.0], [79.9, 8909.0], [80.0, 8909.0], [80.1, 8979.0], [80.2, 8979.0], [80.3, 8981.0], [80.4, 8981.0], [80.5, 8984.0], [80.6, 8984.0], [80.7, 8984.0], [80.8, 8984.0], [80.9, 9001.0], [81.0, 9001.0], [81.1, 9043.0], [81.2, 9043.0], [81.3, 9072.0], [81.4, 9072.0], [81.5, 9083.0], [81.6, 9083.0], [81.7, 9143.0], [81.8, 9143.0], [81.9, 9151.0], [82.0, 9151.0], [82.1, 9152.0], [82.2, 9152.0], [82.3, 9154.0], [82.4, 9154.0], [82.5, 9172.0], [82.6, 9172.0], [82.7, 9211.0], [82.8, 9211.0], [82.9, 9220.0], [83.0, 9220.0], [83.1, 9241.0], [83.2, 9241.0], [83.3, 9244.0], [83.4, 9244.0], [83.5, 9245.0], [83.6, 9245.0], [83.7, 9257.0], [83.8, 9257.0], [83.9, 9258.0], [84.0, 9258.0], [84.1, 9268.0], [84.2, 9268.0], [84.3, 9279.0], [84.4, 9279.0], [84.5, 9287.0], [84.6, 9287.0], [84.7, 9294.0], [84.8, 9294.0], [84.9, 9295.0], [85.0, 9295.0], [85.1, 9297.0], [85.2, 9297.0], [85.3, 9342.0], [85.4, 9342.0], [85.5, 9362.0], [85.6, 9362.0], [85.7, 9367.0], [85.8, 9367.0], [85.9, 9383.0], [86.0, 9383.0], [86.1, 9389.0], [86.2, 9389.0], [86.3, 9403.0], [86.4, 9403.0], [86.5, 9436.0], [86.6, 9436.0], [86.7, 9436.0], [86.8, 9436.0], [86.9, 9442.0], [87.0, 9442.0], [87.1, 9466.0], [87.2, 9466.0], [87.3, 9497.0], [87.4, 9497.0], [87.5, 9519.0], [87.6, 9519.0], [87.7, 9524.0], [87.8, 9524.0], [87.9, 9568.0], [88.0, 9568.0], [88.1, 9570.0], [88.2, 9570.0], [88.3, 9578.0], [88.4, 9578.0], [88.5, 9593.0], [88.6, 9593.0], [88.7, 9600.0], [88.8, 9600.0], [88.9, 9623.0], [89.0, 9623.0], [89.1, 9632.0], [89.2, 9632.0], [89.3, 9645.0], [89.4, 9645.0], [89.5, 9697.0], [89.6, 9697.0], [89.7, 9700.0], [89.8, 9700.0], [89.9, 9712.0], [90.0, 9712.0], [90.1, 9716.0], [90.2, 9716.0], [90.3, 9729.0], [90.4, 9729.0], [90.5, 9731.0], [90.6, 9731.0], [90.7, 9743.0], [90.8, 9743.0], [90.9, 9759.0], [91.0, 9759.0], [91.1, 9766.0], [91.2, 9766.0], [91.3, 9783.0], [91.4, 9783.0], [91.5, 9801.0], [91.6, 9801.0], [91.7, 9843.0], [91.8, 9843.0], [91.9, 9856.0], [92.0, 9856.0], [92.1, 9858.0], [92.2, 9858.0], [92.3, 9860.0], [92.4, 9860.0], [92.5, 9872.0], [92.6, 9872.0], [92.7, 9875.0], [92.8, 9875.0], [92.9, 9890.0], [93.0, 9890.0], [93.1, 9907.0], [93.2, 9907.0], [93.3, 9933.0], [93.4, 9933.0], [93.5, 9967.0], [93.6, 9967.0], [93.7, 9973.0], [93.8, 9973.0], [93.9, 9976.0], [94.0, 9976.0], [94.1, 9978.0], [94.2, 9978.0], [94.3, 9982.0], [94.4, 9982.0], [94.5, 10007.0], [94.6, 10007.0], [94.7, 10023.0], [94.8, 10023.0], [94.9, 10025.0], [95.0, 10025.0], [95.1, 10068.0], [95.2, 10068.0], [95.3, 10080.0], [95.4, 10080.0], [95.5, 10081.0], [95.6, 10081.0], [95.7, 10096.0], [95.8, 10096.0], [95.9, 10112.0], [96.0, 10112.0], [96.1, 10122.0], [96.2, 10122.0], [96.3, 10123.0], [96.4, 10123.0], [96.5, 10135.0], [96.6, 10135.0], [96.7, 10189.0], [96.8, 10189.0], [96.9, 10475.0], [97.0, 10475.0], [97.1, 10587.0], [97.2, 10587.0], [97.3, 10656.0], [97.4, 10656.0], [97.5, 10955.0], [97.6, 10955.0], [97.7, 11044.0], [97.8, 11044.0], [97.9, 11054.0], [98.0, 11054.0], [98.1, 11398.0], [98.2, 11398.0], [98.3, 11407.0], [98.4, 11407.0], [98.5, 11632.0], [98.6, 11632.0], [98.7, 11730.0], [98.8, 11730.0], [98.9, 11833.0], [99.0, 11833.0], [99.1, 12018.0], [99.2, 12018.0], [99.3, 12133.0], [99.4, 12133.0], [99.5, 12169.0], [99.6, 12169.0], [99.7, 12439.0], [99.8, 12439.0], [99.9, 13719.0], [100.0, 13719.0]], "isOverall": false, "label": "Store Detail", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 13.0, "series": [{"data": [[200.0, 2.0], [300.0, 5.0], [400.0, 4.0], [500.0, 4.0], [600.0, 7.0], [700.0, 4.0], [800.0, 7.0], [900.0, 5.0], [1000.0, 5.0], [1100.0, 12.0], [1200.0, 7.0], [1300.0, 6.0], [1400.0, 8.0], [1500.0, 4.0], [1600.0, 5.0], [1700.0, 5.0], [1800.0, 6.0], [1900.0, 3.0], [2000.0, 8.0], [2100.0, 4.0], [2200.0, 2.0], [2300.0, 5.0], [2400.0, 7.0], [2500.0, 4.0], [2600.0, 2.0], [2800.0, 7.0], [2700.0, 3.0], [2900.0, 2.0], [3000.0, 6.0], [3100.0, 6.0], [3200.0, 5.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 3.0], [4000.0, 1.0], [4200.0, 2.0], [4100.0, 6.0], [4300.0, 2.0], [4500.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [4800.0, 8.0], [4700.0, 7.0], [5000.0, 9.0], [4900.0, 3.0], [5100.0, 3.0], [5300.0, 7.0], [5200.0, 8.0], [5400.0, 3.0], [5500.0, 6.0], [5600.0, 3.0], [5700.0, 8.0], [5800.0, 6.0], [5900.0, 8.0], [6100.0, 2.0], [6000.0, 2.0], [6200.0, 4.0], [6300.0, 2.0], [6400.0, 3.0], [6500.0, 4.0], [6600.0, 3.0], [6700.0, 1.0], [6900.0, 3.0], [6800.0, 1.0], [7000.0, 4.0], [7100.0, 3.0], [7200.0, 2.0], [7300.0, 2.0], [7400.0, 1.0], [7600.0, 10.0], [7500.0, 6.0], [7800.0, 8.0], [7900.0, 4.0], [7700.0, 9.0], [8100.0, 5.0], [8000.0, 9.0], [8400.0, 7.0], [8300.0, 7.0], [8200.0, 10.0], [8700.0, 2.0], [8500.0, 3.0], [8600.0, 3.0], [9000.0, 10.0], [8900.0, 2.0], [9200.0, 8.0], [9100.0, 3.0], [8800.0, 2.0], [9700.0, 5.0], [9300.0, 11.0], [9400.0, 10.0], [9600.0, 6.0], [9500.0, 7.0], [10200.0, 5.0], [9800.0, 5.0], [9900.0, 6.0], [10000.0, 5.0], [10100.0, 2.0], [10300.0, 1.0], [10400.0, 2.0], [10500.0, 4.0], [10600.0, 3.0], [11200.0, 2.0], [10900.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11700.0, 1.0], [11400.0, 2.0], [12000.0, 4.0], [12300.0, 2.0], [12700.0, 1.0], [12500.0, 1.0], [13000.0, 1.0], [12900.0, 1.0]], "isOverall": false, "label": "Store List", "isController": false}, {"data": [[0.0, 2.0], [100.0, 4.0], [200.0, 3.0], [300.0, 4.0], [400.0, 4.0], [500.0, 1.0], [600.0, 3.0], [700.0, 3.0], [800.0, 5.0], [900.0, 4.0], [1000.0, 6.0], [1100.0, 5.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 5.0], [1500.0, 8.0], [1600.0, 4.0], [1700.0, 9.0], [1800.0, 7.0], [1900.0, 3.0], [2000.0, 5.0], [2100.0, 1.0], [2200.0, 6.0], [2300.0, 7.0], [2400.0, 7.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 5.0], [2800.0, 8.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 6.0], [3300.0, 7.0], [3200.0, 2.0], [3400.0, 4.0], [3500.0, 6.0], [3600.0, 8.0], [3700.0, 3.0], [3800.0, 5.0], [3900.0, 3.0], [4000.0, 6.0], [4200.0, 3.0], [4300.0, 5.0], [4100.0, 2.0], [4400.0, 5.0], [4600.0, 7.0], [4500.0, 5.0], [4700.0, 7.0], [4800.0, 4.0], [5100.0, 6.0], [5000.0, 4.0], [4900.0, 1.0], [5300.0, 10.0], [5200.0, 3.0], [5600.0, 8.0], [5400.0, 3.0], [5500.0, 9.0], [5700.0, 9.0], [5800.0, 8.0], [5900.0, 6.0], [6000.0, 6.0], [6100.0, 1.0], [6200.0, 10.0], [6300.0, 5.0], [6500.0, 6.0], [6600.0, 2.0], [6400.0, 3.0], [6800.0, 5.0], [6900.0, 7.0], [6700.0, 3.0], [7000.0, 2.0], [7100.0, 3.0], [7200.0, 3.0], [7300.0, 4.0], [7400.0, 3.0], [7600.0, 3.0], [7500.0, 6.0], [7700.0, 3.0], [7800.0, 5.0], [7900.0, 4.0], [8100.0, 3.0], [8000.0, 2.0], [8200.0, 1.0], [8300.0, 3.0], [8700.0, 3.0], [8500.0, 4.0], [8400.0, 1.0], [8800.0, 4.0], [8900.0, 5.0], [9000.0, 4.0], [9100.0, 5.0], [9200.0, 13.0], [9300.0, 5.0], [9400.0, 6.0], [9500.0, 6.0], [9600.0, 5.0], [9700.0, 9.0], [10000.0, 7.0], [9800.0, 8.0], [9900.0, 7.0], [10100.0, 5.0], [10500.0, 1.0], [10600.0, 1.0], [10400.0, 1.0], [11000.0, 2.0], [10900.0, 1.0], [11300.0, 1.0], [11700.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [12000.0, 1.0], [12100.0, 2.0], [11800.0, 1.0], [12400.0, 1.0], [13700.0, 1.0]], "isOverall": false, "label": "Store Detail", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 865.0, "series": [{"data": [[0.0, 28.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 107.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 865.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 227.79799999999975, "minX": 1.66666758E12, "maxY": 227.79799999999975, "series": [{"data": [[1.66666758E12, 227.79799999999975]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66666758E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 201.5, "minX": 2.0, "maxY": 13719.0, "series": [{"data": [[18.0, 298.3333333333333], [19.0, 273.0], [22.0, 433.0], [23.0, 366.0], [27.0, 479.0], [33.0, 391.0], [32.0, 461.0], [34.0, 600.0], [37.0, 590.5], [38.0, 480.0], [41.0, 625.0], [44.0, 774.0], [46.0, 6338.0], [47.0, 635.0], [48.0, 683.0], [49.0, 625.5], [50.0, 1009.5], [58.0, 867.5], [59.0, 821.5], [67.0, 1008.0], [70.0, 981.5], [75.0, 1141.5], [72.0, 12049.0], [76.0, 1009.0], [77.0, 1043.6666666666667], [78.0, 1079.5], [81.0, 1127.0], [85.0, 1186.0], [86.0, 1175.0], [88.0, 1204.5], [89.0, 1127.0], [90.0, 1329.5], [91.0, 1209.0], [93.0, 1297.0], [95.0, 1339.0], [99.0, 1357.0], [98.0, 1245.0], [104.0, 1301.0], [105.0, 1483.0], [111.0, 1435.5], [112.0, 1488.5], [118.0, 1405.0], [119.0, 1775.0], [117.0, 12049.0], [122.0, 1542.3333333333333], [123.0, 1645.0], [121.0, 11465.0], [125.0, 540.0], [128.0, 1923.0], [129.0, 1735.0], [133.0, 12966.0], [137.0, 1701.4], [136.0, 1844.6666666666667], [138.0, 1813.0], [142.0, 2099.0], [145.0, 1893.5], [144.0, 2034.0], [150.0, 2036.5], [149.0, 2054.5], [148.0, 1829.0], [151.0, 2061.0], [152.0, 2877.0], [157.0, 1411.0], [156.0, 2115.5], [158.0, 1445.5], [162.0, 2104.0], [172.0, 2341.0], [171.0, 2383.5], [169.0, 2387.6666666666665], [174.0, 2432.0], [175.0, 2384.0], [181.0, 2551.0], [183.0, 2454.5], [188.0, 2467.0], [191.0, 2646.5], [194.0, 6678.5], [196.0, 2626.0], [195.0, 2547.0], [198.0, 2717.0], [200.0, 2684.0], [203.0, 2793.0], [205.0, 2866.0], [214.0, 2363.0], [211.0, 2888.5], [212.0, 3159.0], [213.0, 2862.0], [217.0, 2964.0], [221.0, 2938.5], [222.0, 3017.0], [229.0, 3091.3333333333335], [228.0, 3178.3333333333335], [226.0, 3009.0], [227.0, 3035.0], [238.0, 3180.0], [240.0, 3260.0], [241.0, 3185.0], [253.0, 2059.8], [255.0, 10595.0], [254.0, 10582.25], [269.0, 10311.5], [262.0, 3619.0], [265.0, 3806.5], [271.0, 7020.0], [270.0, 10238.0], [263.0, 10451.0], [261.0, 12587.0], [260.0, 11200.0], [258.0, 10541.0], [273.0, 6968.75], [275.0, 6853.333333333334], [282.0, 7597.4], [286.0, 9800.75], [283.0, 9915.6], [281.0, 9938.0], [279.0, 9972.0], [276.0, 11223.142857142857], [302.0, 9490.4], [292.0, 4445.6], [299.0, 6354.6], [300.0, 10620.0], [291.0, 9629.0], [290.0, 9711.0], [288.0, 9801.5], [298.0, 9462.0], [297.0, 9499.5], [296.0, 9572.0], [295.0, 9569.0], [294.0, 9622.0], [318.0, 7519.0], [308.0, 8608.0], [310.0, 4395.0], [315.0, 4515.0], [316.0, 8332.6], [319.0, 9097.0], [314.0, 9270.0], [312.0, 9306.5], [311.0, 9299.5], [306.0, 9403.0], [304.0, 9299.0], [307.0, 9475.0], [334.0, 7467.5], [320.0, 5295.0], [322.0, 7537.333333333333], [321.0, 9012.0], [323.0, 8875.625], [327.0, 7047.875], [325.0, 8458.0], [324.0, 8372.666666666666], [335.0, 4831.0], [328.0, 9154.333333333334], [333.0, 8016.0], [332.0, 8460.461538461537], [331.0, 8216.0], [329.0, 8431.333333333334], [350.0, 7191.0], [337.0, 6182.0], [338.0, 6114.142857142857], [349.0, 7259.5], [348.0, 6678.0], [336.0, 7129.428571428572], [342.0, 7234.333333333334], [341.0, 7714.666666666667], [340.0, 7763.75], [343.0, 4881.0], [346.0, 7615.8], [347.0, 7056.0], [351.0, 6114.0], [344.0, 7670.0], [364.0, 5947.166666666667], [352.0, 6643.833333333333], [354.0, 5840.0], [353.0, 6582.0], [355.0, 6599.0], [356.0, 7040.5], [357.0, 6278.444444444444], [359.0, 6392.0], [358.0, 6458.0], [360.0, 6066.285714285715], [363.0, 5232.0], [367.0, 6105.0], [365.0, 6458.6], [375.0, 5554.0], [368.0, 5329.0], [369.0, 5998.0], [371.0, 5997.0], [370.0, 5946.0], [372.0, 5240.333333333334], [373.0, 5438.333333333333], [374.0, 5653.166666666667], [376.0, 5380.0], [377.0, 6120.75], [378.0, 5538.0], [379.0, 5374.5], [382.0, 5195.75], [381.0, 5585.5]], "isOverall": false, "label": "Store List", "isController": false}, {"data": [[262.8780000000001, 5732.464000000005]], "isOverall": false, "label": "Store List-Aggregated", "isController": false}, {"data": [[2.0, 201.5], [4.0, 1302.0], [6.0, 662.0], [7.0, 8331.0], [9.0, 1807.0], [10.0, 1557.0], [11.0, 1526.0], [12.0, 1690.0], [13.0, 1754.0], [14.0, 1561.0], [22.0, 3651.2], [23.0, 984.0], [24.0, 2359.0], [25.0, 4663.0], [26.0, 2288.0], [27.0, 10189.0], [28.0, 9858.0], [29.0, 2481.0], [30.0, 2335.0], [31.0, 2580.0], [33.0, 4139.666666666666], [35.0, 13719.0], [34.0, 2298.0], [37.0, 6351.0], [38.0, 388.0], [39.0, 9991.5], [41.0, 6371.0], [42.0, 9982.0], [47.0, 1639.5], [46.0, 6822.0], [49.0, 1646.0], [50.0, 1237.0], [53.0, 3109.0], [52.0, 3360.0], [55.0, 3288.0], [56.0, 10587.0], [58.0, 3357.0], [60.0, 2507.3333333333335], [61.0, 3549.0], [63.0, 3539.0], [66.0, 10955.0], [65.0, 11044.0], [64.0, 3432.0], [68.0, 5147.333333333333], [71.0, 3634.0], [70.0, 3690.5], [75.0, 3679.0], [74.0, 3785.0], [73.0, 11632.0], [72.0, 3570.0], [76.0, 2383.5], [78.0, 896.0], [77.0, 1878.6666666666667], [81.0, 924.0], [83.0, 4050.0], [82.0, 3805.5], [80.0, 6599.0], [85.0, 2561.0], [86.0, 1000.0], [87.0, 3998.5], [84.0, 3864.0], [91.0, 1933.25], [90.0, 4275.0], [89.0, 3826.0], [88.0, 3825.0], [94.0, 2298.0], [95.0, 4468.0], [93.0, 4394.0], [92.0, 4348.0], [99.0, 949.3333333333333], [98.0, 2360.6], [96.0, 4542.0], [103.0, 4521.0], [101.0, 4666.0], [100.0, 8096.5], [107.0, 5024.5], [105.0, 4521.0], [104.0, 4897.0], [111.0, 3211.0], [110.0, 5118.0], [109.0, 5025.0], [108.0, 5017.0], [112.0, 3182.5], [114.0, 3279.5], [115.0, 5196.0], [113.0, 5333.0], [118.0, 5262.0], [117.0, 5317.0], [116.0, 5299.0], [122.0, 3397.0], [123.0, 3369.0], [121.0, 5475.333333333333], [125.0, 2793.666666666667], [127.0, 5613.0], [126.0, 5525.0], [124.0, 5485.0], [135.0, 5740.0], [134.0, 5753.0], [133.0, 5750.0], [132.0, 5742.0], [131.0, 5664.0], [130.0, 5655.0], [129.0, 5731.0], [128.0, 5661.0], [137.0, 3732.5], [136.0, 3054.0], [142.0, 5795.0], [141.0, 5930.0], [140.0, 5788.0], [139.0, 5896.0], [138.0, 5840.0], [145.0, 4484.4], [146.0, 3800.0], [144.0, 1786.0], [150.0, 3817.0], [149.0, 4834.666666666667], [151.0, 5962.0], [153.0, 2632.0], [156.0, 4098.5], [158.0, 1969.0], [159.0, 6059.0], [157.0, 6360.0], [155.0, 6264.0], [154.0, 5993.0], [152.0, 6066.0], [162.0, 1909.0], [164.0, 6348.0], [161.0, 6409.0], [160.0, 6248.0], [172.0, 5041.0], [171.0, 2070.5], [175.0, 6609.0], [174.0, 6546.0], [173.0, 6812.0], [170.0, 6532.0], [169.0, 6616.0], [168.0, 6563.75], [183.0, 6842.0], [182.0, 6900.0], [181.0, 6792.0], [180.0, 6903.0], [179.0, 6812.0], [178.0, 6547.0], [177.0, 12133.0], [176.0, 6856.0], [191.0, 1799.0], [190.0, 6982.5], [188.0, 7169.0], [187.0, 6990.0], [186.0, 353.0], [185.0, 7091.0], [184.0, 6917.0], [192.0, 2340.0], [195.0, 4793.5], [196.0, 2304.0], [199.0, 7269.0], [198.0, 2049.0], [197.0, 4103.0], [194.0, 7185.0], [193.0, 4440.0], [201.0, 4151.0], [203.0, 5035.5], [207.0, 7651.0], [206.0, 7537.0], [205.0, 878.0], [204.0, 7567.0], [202.0, 7322.0], [200.0, 763.0], [214.0, 1893.6666666666665], [215.0, 10378.5], [213.0, 7918.333333333333], [210.0, 7789.0], [209.0, 836.0], [208.0, 7648.0], [223.0, 4707.333333333333], [222.0, 4802.5], [220.0, 1234.0], [219.0, 1436.5], [217.0, 1560.0], [216.0, 1525.0], [229.0, 2114.5], [228.0, 4790.333333333333], [227.0, 5711.5], [231.0, 9258.0], [230.0, 8746.0], [226.0, 4961.5], [224.0, 1588.0], [239.0, 5175.333333333334], [238.0, 9294.0], [237.0, 9524.0], [236.0, 9043.0], [235.0, 9211.0], [234.0, 9287.0], [233.0, 9645.0], [232.0, 8775.0], [240.0, 3003.0], [244.0, 3101.0], [247.0, 9697.0], [246.0, 9497.0], [245.0, 9437.5], [243.0, 9570.0], [242.0, 9220.0], [241.0, 9454.0], [253.0, 2516.0], [254.0, 5633.428571428572], [255.0, 9729.0], [248.0, 10096.0], [270.0, 9978.0], [262.0, 5587.333333333334], [261.0, 1655.0], [260.0, 9743.0], [271.0, 2476.0], [269.0, 10112.0], [268.0, 10122.0], [263.0, 10023.0], [257.0, 9856.0], [256.0, 9860.0], [259.0, 9907.0], [258.0, 2364.0], [267.0, 10081.0], [266.0, 10068.0], [265.0, 10025.0], [264.0, 9967.0], [273.0, 3158.5], [272.0, 5542.5], [275.0, 3217.5], [274.0, 9872.0], [276.0, 7526.0], [277.0, 7512.0], [278.0, 6739.0], [279.0, 9759.0], [287.0, 9632.0], [281.0, 9766.0], [280.0, 9731.0], [283.0, 9716.0], [282.0, 9712.0], [286.0, 12169.0], [285.0, 9600.0], [284.0, 9568.0], [302.0, 9244.0], [300.0, 6605.0], [303.0, 9295.0], [301.0, 9245.0], [299.0, 12018.0], [298.0, 9268.0], [297.0, 9362.0], [296.0, 9367.0], [295.0, 3520.0], [289.0, 3318.0], [288.0, 9623.0], [291.0, 9436.0], [290.0, 9593.0], [294.0, 9383.0], [293.0, 9466.0], [292.0, 9436.0], [318.0, 4449.0], [305.0, 4204.0], [304.0, 3942.0], [311.0, 8981.5], [309.0, 9001.0], [308.0, 9151.0], [319.0, 8882.0], [317.0, 8909.0], [316.0, 9193.5], [307.0, 9172.0], [306.0, 9249.0], [314.0, 9072.0], [313.0, 8879.0], [312.0, 9143.0], [334.0, 7832.0], [320.0, 5833.666666666667], [321.0, 4752.0], [327.0, 8054.0], [326.0, 8271.0], [325.0, 8188.0], [324.0, 8315.0], [322.0, 4628.5], [335.0, 7834.0], [333.0, 7979.0], [332.0, 7832.0], [323.0, 8787.0], [331.0, 7881.0], [330.0, 7886.0], [329.0, 8160.0], [328.0, 8058.0], [339.0, 6259.0], [337.0, 6095.5], [338.0, 6086.5], [336.0, 6174.5], [343.0, 7404.0], [342.0, 8134.0], [340.0, 5599.0], [341.0, 6113.0], [351.0, 9342.0], [345.0, 10080.0], [344.0, 7373.0], [347.0, 7359.0], [346.0, 7262.0], [350.0, 6989.0], [349.0, 4480.0], [348.0, 7291.0], [366.0, 5599.0], [358.0, 5080.6], [357.0, 6340.0], [356.0, 6238.0], [360.0, 5538.0], [359.0, 5538.5], [363.0, 5415.5], [367.0, 5591.0], [365.0, 5720.0], [364.0, 5927.0], [355.0, 6310.0], [354.0, 6372.0], [353.0, 8869.0], [352.0, 6823.0], [362.0, 5967.0], [361.0, 6054.0], [381.0, 5370.0], [377.0, 5322.666666666667], [378.0, 6349.5], [380.0, 4355.0], [371.0, 5472.0], [370.0, 5854.0], [369.0, 5554.0], [368.0, 5566.0], [382.0, 5315.0], [379.0, 5388.0], [376.0, 5463.0], [375.0, 5573.0], [374.0, 5642.0], [373.0, 5600.0], [372.0, 5646.0]], "isOverall": false, "label": "Store Detail", "isController": false}, {"data": [[192.71799999999988, 5424.089999999999]], "isOverall": false, "label": "Store Detail-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 382.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8158.333333333333, "minX": 1.66666758E12, "maxY": 206733.3, "series": [{"data": [[1.66666758E12, 206733.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66666758E12, 8158.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66666758E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5424.089999999999, "minX": 1.66666758E12, "maxY": 5732.464000000005, "series": [{"data": [[1.66666758E12, 5732.464000000005]], "isOverall": false, "label": "Store List", "isController": false}, {"data": [[1.66666758E12, 5424.089999999999]], "isOverall": false, "label": "Store Detail", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66666758E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5423.847999999998, "minX": 1.66666758E12, "maxY": 5721.8780000000015, "series": [{"data": [[1.66666758E12, 5721.8780000000015]], "isOverall": false, "label": "Store List", "isController": false}, {"data": [[1.66666758E12, 5423.847999999998]], "isOverall": false, "label": "Store Detail", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66666758E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66666758E12, "maxY": 58.633999999999965, "series": [{"data": [[1.66666758E12, 58.633999999999965]], "isOverall": false, "label": "Store List", "isController": false}, {"data": [[1.66666758E12, 0.0]], "isOverall": false, "label": "Store Detail", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66666758E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 90.0, "minX": 1.66666758E12, "maxY": 13719.0, "series": [{"data": [[1.66666758E12, 13719.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66666758E12, 9746.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66666758E12, 12132.37]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66666758E12, 10188.249999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66666758E12, 90.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66666758E12, 5569.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66666758E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1411.5, "minX": 20.0, "maxY": 9596.5, "series": [{"data": [[33.0, 7599.0], [36.0, 1789.5], [144.0, 6766.0], [38.0, 2983.5], [39.0, 6897.0], [40.0, 1411.5], [43.0, 5767.0], [42.0, 7857.0], [45.0, 1839.0], [49.0, 9596.5], [20.0, 7064.5], [24.0, 4160.5], [26.0, 8864.5], [29.0, 3414.0], [31.0, 4322.0], [126.0, 4021.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 144.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1410.5, "minX": 20.0, "maxY": 9594.0, "series": [{"data": [[33.0, 7586.0], [36.0, 1788.5], [144.0, 6766.0], [38.0, 2976.0], [39.0, 6897.0], [40.0, 1410.5], [43.0, 5757.0], [42.0, 7846.0], [45.0, 1826.0], [49.0, 9594.0], [20.0, 7062.5], [24.0, 4160.0], [26.0, 8862.0], [29.0, 3414.0], [31.0, 4308.5], [126.0, 4020.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 144.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66666758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66666758E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66666758E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66666758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66666758E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66666758E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.66666758E12, "maxY": 8.333333333333334, "series": [{"data": [[1.66666758E12, 8.333333333333334]], "isOverall": false, "label": "Store Detail-success", "isController": false}, {"data": [[1.66666758E12, 8.333333333333334]], "isOverall": false, "label": "Store List-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66666758E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66666758E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66666758E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66666758E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

